{"ast":null,"code":"var _jsxFileName = \"/Users/chriscruz/Desktop/my_site/client/src/home.jsx\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MyNarbar from './myNavbar';\nimport Image from 'react-bootstrap/Image';\nimport { text } from 'express';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  console.log(http.ServerResponse.prototype);\n  let [serverRes, setServerRes] = useState({\n    serverRes: \"\"\n  });\n\n  let callServer = () => {\n    fetch(\"http://localhost:9000/testAPI\").then(res => res / text()).then(res => setServerRes({\n      serverRes: res\n    }));\n  };\n\n  useEffect(() => {\n    callServer();\n  }, []); //Reference for getting window size https://stackoverflow.com/questions/44480053/how-to-detect-if-screen-size-has-changed-to-mobile-in-react\n\n  const getWindowDimensions = () => {\n    const {\n      innerWidth: width,\n      innerHeight: height\n    } = window;\n    return {\n      width,\n      height\n    };\n  };\n\n  const useWindowDimensions = () => {\n    _s();\n\n    let [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n    useEffect(() => {\n      const handleResize = () => {\n        setWindowDimensions(getWindowDimensions());\n      };\n\n      window.addEventListener('resize', handleResize);\n      return () => window.removeEventListener('resize', handleResize);\n    }, []);\n    return windowDimensions;\n  };\n\n  _s(useWindowDimensions, \"IhgZGAgQA6cPribvCFQY/POMRMk=\");\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MyNarbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), useWindowDimensions().width > 1100 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: \"2em\",\n        display: \"inline\",\n        position: \"relative\",\n        top: \"10em\",\n        left: \"10em\",\n        zIndex: \"2\"\n      },\n      children: \"Web developer. Explorer. Learner.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        display: \"inline\",\n        position: \"relative\",\n        top: \"10em\",\n        left: \"10em\",\n        zIndex: \"2\"\n      },\n      children: \"Web developer. Explorer. Learner.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Image, {\n      src: \"explorer.png\",\n      width: \"100%\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"App-intro\",\n      children: [\" \", serverRes, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s2(Home, \"UJJyxWI4pHxmpjhprRinQXZOP7Y=\", true);\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/chriscruz/Desktop/my_site/client/src/home.jsx"],"names":["React","useState","useEffect","MyNarbar","Image","text","Home","console","log","http","ServerResponse","prototype","serverRes","setServerRes","callServer","fetch","then","res","getWindowDimensions","innerWidth","width","innerHeight","height","window","useWindowDimensions","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","fontSize","display","position","top","left","zIndex"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,sCAAP;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,SAASC,IAAT,QAAqB,SAArB;;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AAAA;;AAEjBC,EAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,cAAL,CAAoBC,SAAhC;AAEA,MAAI,CAACC,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC;AAACW,IAAAA,SAAS,EAAE;AAAZ,GAAD,CAAxC;;AAEA,MAAIE,UAAU,GAAG,MAAM;AACrBC,IAAAA,KAAK,CAAC,+BAAD,CAAL,CACCC,IADD,CACMC,GAAG,IAAIA,GAAG,GAACZ,IAAI,EADrB,EAECW,IAFD,CAEMC,GAAG,IAAIJ,YAAY,CAAC;AAACD,MAAAA,SAAS,EAAEK;AAAZ,KAAD,CAFzB;AAGD,GAJD;;AAMAf,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,UAAU;AACX,GAFQ,EAEN,EAFM,CAAT,CAZiB,CAgBjB;;AACA,QAAMI,mBAAmB,GAAG,MAAM;AAChC,UAAM;AAAEC,MAAAA,UAAU,EAAEC,KAAd;AAAqBC,MAAAA,WAAW,EAAEC;AAAlC,QAA6CC,MAAnD;AACA,WAAO;AACLH,MAAAA,KADK;AAELE,MAAAA;AAFK,KAAP;AAID,GAND;;AAQA,QAAME,mBAAmB,GAAG,MAAM;AAAA;;AAChC,QAAI,CAAEC,gBAAF,EAAoBC,mBAApB,IAA4CzB,QAAQ,CAACiB,mBAAmB,EAApB,CAAxD;AAEAhB,IAAAA,SAAS,CAAC,MAAM;AACd,YAAMyB,YAAY,GAAG,MAAM;AACzBD,QAAAA,mBAAmB,CAACR,mBAAmB,EAApB,CAAnB;AACD,OAFD;;AAIAK,MAAAA,MAAM,CAACK,gBAAP,CAAwB,QAAxB,EAAkCD,YAAlC;AACA,aAAO,MAAMJ,MAAM,CAACM,mBAAP,CAA2B,QAA3B,EAAqCF,YAArC,CAAb;AACD,KAPQ,EAON,EAPM,CAAT;AASA,WAAOF,gBAAP;AACD,GAbD;;AAzBiB,KAyBXD,mBAzBW;;AAwCjB,sBACE;AAAA,4BACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YADF,EAEIA,mBAAmB,GAAGJ,KAAtB,GAA8B,IAA/B,gBACC;AAAG,MAAA,KAAK,EAAE;AAAEU,QAAAA,QAAQ,EAAE,KAAZ;AAAkBC,QAAAA,OAAO,EAAE,QAA3B;AAAqCC,QAAAA,QAAQ,EAAE,UAA/C;AAA2DC,QAAAA,GAAG,EAAE,MAAhE;AAAwEC,QAAAA,IAAI,EAAE,MAA9E;AAAsFC,QAAAA,MAAM,EAAE;AAA9F,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,gBAGC;AAAG,MAAA,KAAK,EAAE;AAAEJ,QAAAA,OAAO,EAAE,QAAX;AAAqBC,QAAAA,QAAQ,EAAE,UAA/B;AAA2CC,QAAAA,GAAG,EAAE,MAAhD;AAAwDC,QAAAA,IAAI,EAAE,MAA9D;AAAsEC,QAAAA,MAAM,EAAE;AAA9E,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,eAOE,QAAC,KAAD;AACE,MAAA,GAAG,EAAC,cADN;AAEE,MAAA,KAAK,EAAC;AAFR;AAAA;AAAA;AAAA;AAAA,YAPF,eAWE;AAAG,MAAA,SAAS,EAAC,WAAb;AAAA,sBAA2BvB,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA,kBADF;AAeD,CAvDD;;IAAMN,I;;KAAAA,I;AAyDN,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MyNarbar from './myNavbar';\nimport Image from 'react-bootstrap/Image'\nimport { text } from 'express';\n\nconst Home = () => {\n\n  console.log(http.ServerResponse.prototype);\n  \n  let [serverRes, setServerRes] = useState({serverRes: \"\"});\n\n  let callServer = () => {\n    fetch(\"http://localhost:9000/testAPI\")\n    .then(res => res/text())\n    .then(res => setServerRes({serverRes: res}));\n  };\n\n  useEffect(() => {\n    callServer();\n  }, []);\n\n  //Reference for getting window size https://stackoverflow.com/questions/44480053/how-to-detect-if-screen-size-has-changed-to-mobile-in-react\n  const getWindowDimensions = () => {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n      width,\n      height\n    };\n  };\n\n  const useWindowDimensions = () => {\n    let [ windowDimensions, setWindowDimensions ] = useState(getWindowDimensions());\n\n    useEffect(() => {\n      const handleResize = () => {\n        setWindowDimensions(getWindowDimensions());\n      };\n  \n      window.addEventListener('resize', handleResize);\n      return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    return windowDimensions;\n  }\n\n  return (\n    <>\n      <MyNarbar />\n      {(useWindowDimensions().width > 1100) ? \n        <p style={{ fontSize: \"2em\",display: \"inline\", position: \"relative\", top: \"10em\", left: \"10em\", zIndex: \"2\"}}>Web developer. Explorer. Learner.</p>\n        :\n        <p style={{ display: \"inline\", position: \"relative\", top: \"10em\", left: \"10em\", zIndex: \"2\"}}>Web developer. Explorer. Learner.</p>\n      }\n      <Image\n        src=\"explorer.png\"\n        width=\"100%\"\n      />\n      <p className=\"App-intro\"> {serverRes} </p>\n    </>\n  );\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}